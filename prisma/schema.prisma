generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  //shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @unique
  debtLimit    Int           @default(0)
  email        String?
  credit       Int           @default(0)
  avatar       String?
  authMethods  AuthMethod[]
  transfers    Transaction[] @relation("TransactionTransferUser")
  transactions Transaction[] @relation("TransactionUser")
}

model AuthMethod {
  id             Int         @id @default(autoincrement())
  authType       AuthType
  secret         String
  userId         Int?
  secondFactorId Int?        @unique
  secondFactor   AuthMethod? @relation("SecondFactor", fields: [secondFactorId], references: [id])
  firstFactor    AuthMethod? @relation("SecondFactor")
  user           User?       @relation(fields: [userId], references: [id])
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String
  order    Int
  products Product[]
}

model Product {
  id           Int             @id @default(autoincrement())
  name         String
  price        Int
  categoryId   Int
  ean          String          @default("")
  order        Int
  hidden       Boolean
  image        String?
  category     ProductCategory @relation(fields: [categoryId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id              Int             @id @default(autoincrement())
  userId          Int?
  creditDelta     Int
  createdAt       DateTime        @default(now())
  transactionType TransactionType
  productId       Int?
  transferUserId  Int?
  product         Product?        @relation(fields: [productId], references: [id])
  transferUser    User?           @relation("TransactionTransferUser", fields: [transferUserId], references: [id])
  user            User?           @relation("TransactionUser", fields: [userId], references: [id])
}

enum AuthType {
  Pincode
  Password
  RFID
  Barcode
}

enum TransactionType {
  ProductBought
  AccountCharged
  AccountTransfer
}
